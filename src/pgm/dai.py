# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _dai
else:
    import _dai

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dai.delete_SwigPyIterator

    def value(self):
        return _dai.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _dai.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _dai.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _dai.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _dai.SwigPyIterator_equal(self, x)

    def copy(self):
        return _dai.SwigPyIterator_copy(self)

    def next(self):
        return _dai.SwigPyIterator_next(self)

    def __next__(self):
        return _dai.SwigPyIterator___next__(self)

    def previous(self):
        return _dai.SwigPyIterator_previous(self)

    def advance(self, n):
        return _dai.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _dai.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _dai.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _dai.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _dai.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _dai.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _dai.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _dai:
_dai.SwigPyIterator_swigregister(SwigPyIterator)

class IntVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dai.IntVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dai.IntVector___nonzero__(self)

    def __bool__(self):
        return _dai.IntVector___bool__(self)

    def __len__(self):
        return _dai.IntVector___len__(self)

    def __getslice__(self, i, j):
        return _dai.IntVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dai.IntVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dai.IntVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dai.IntVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dai.IntVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dai.IntVector___setitem__(self, *args)

    def pop(self):
        return _dai.IntVector_pop(self)

    def append(self, x):
        return _dai.IntVector_append(self, x)

    def empty(self):
        return _dai.IntVector_empty(self)

    def size(self):
        return _dai.IntVector_size(self)

    def swap(self, v):
        return _dai.IntVector_swap(self, v)

    def begin(self):
        return _dai.IntVector_begin(self)

    def end(self):
        return _dai.IntVector_end(self)

    def rbegin(self):
        return _dai.IntVector_rbegin(self)

    def rend(self):
        return _dai.IntVector_rend(self)

    def clear(self):
        return _dai.IntVector_clear(self)

    def get_allocator(self):
        return _dai.IntVector_get_allocator(self)

    def pop_back(self):
        return _dai.IntVector_pop_back(self)

    def erase(self, *args):
        return _dai.IntVector_erase(self, *args)

    def __init__(self, *args):
        _dai.IntVector_swiginit(self, _dai.new_IntVector(*args))

    def push_back(self, x):
        return _dai.IntVector_push_back(self, x)

    def front(self):
        return _dai.IntVector_front(self)

    def back(self):
        return _dai.IntVector_back(self)

    def assign(self, n, x):
        return _dai.IntVector_assign(self, n, x)

    def resize(self, *args):
        return _dai.IntVector_resize(self, *args)

    def insert(self, *args):
        return _dai.IntVector_insert(self, *args)

    def reserve(self, n):
        return _dai.IntVector_reserve(self, n)

    def capacity(self):
        return _dai.IntVector_capacity(self)
    __swig_destroy__ = _dai.delete_IntVector

# Register IntVector in _dai:
_dai.IntVector_swigregister(IntVector)


def BigInt_size_t(N):
    return _dai.BigInt_size_t(N)

def isnan(x):
    return _dai.isnan(x)

def log(x):
    return _dai.log(x)

def log0(x):
    return _dai.log0(x)

def exp(x):
    return _dai.exp(x)

def pow(x, y):
    return _dai.pow(x, y)

def toc():
    return _dai.toc()

def rnd_seed(seed):
    return _dai.rnd_seed(seed)

def rnd_uniform():
    return _dai.rnd_uniform()

def rnd_stdnormal():
    return _dai.rnd_stdnormal()

def rnd_int(min, max):
    return _dai.rnd_int(min, max)

def rnd(n):
    return _dai.rnd(n)

def tokenizeString(*args):
    return _dai.tokenizeString(*args)
NORMPROB = _dai.NORMPROB
NORMLINF = _dai.NORMLINF
DISTL1 = _dai.DISTL1
DISTLINF = _dai.DISTLINF
DISTTV = _dai.DISTTV
DISTKL = _dai.DISTKL
DISTHEL = _dai.DISTHEL
class Var(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.Var_swiginit(self, _dai.new_Var(*args))

    def label(self):
        return _dai.Var_label(self)

    def states(self):
        return _dai.Var_states(self)

    def __lt__(self, n):
        return _dai.Var___lt__(self, n)

    def __gt__(self, n):
        return _dai.Var___gt__(self, n)

    def __le__(self, n):
        return _dai.Var___le__(self, n)

    def __ge__(self, n):
        return _dai.Var___ge__(self, n)

    def __ne__(self, n):
        return _dai.Var___ne__(self, n)

    def __eq__(self, n):
        return _dai.Var___eq__(self, n)

    def toString(self):
        return _dai.Var_toString(self)

    def __str__(self):
        return _dai.Var___str__(self)

    def __str(self):
        return _dai.Var___str(self)
    __swig_destroy__ = _dai.delete_Var

# Register Var in _dai:
_dai.Var_swigregister(Var)

class SmallSetVar(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.SmallSetVar_swiginit(self, _dai.new_SmallSetVar(*args))

    def insert(self, t):
        return _dai.SmallSetVar_insert(self, t)

    def erase(self, t):
        return _dai.SmallSetVar_erase(self, t)

    def __truediv__(self, *args):
        return _dai.SmallSetVar___truediv__(self, *args)
    __div__ = __truediv__



    def __or__(self, x):
        return _dai.SmallSetVar___or__(self, x)

    def __and__(self, x):
        return _dai.SmallSetVar___and__(self, x)

    def __itruediv__(self, *args):
        return _dai.SmallSetVar___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __ior__(self, *args):
        return _dai.SmallSetVar___ior__(self, *args)

    def __iand__(self, x):
        return _dai.SmallSetVar___iand__(self, x)

    def __lshift__(self, x):
        return _dai.SmallSetVar___lshift__(self, x)

    def __rshift__(self, x):
        return _dai.SmallSetVar___rshift__(self, x)

    def intersects(self, x):
        return _dai.SmallSetVar_intersects(self, x)

    def contains(self, t):
        return _dai.SmallSetVar_contains(self, t)

    def size(self):
        return _dai.SmallSetVar_size(self)

    def empty(self):
        return _dai.SmallSetVar_empty(self)

    def elements(self, *args):
        return _dai.SmallSetVar_elements(self, *args)

    def begin(self, *args):
        return _dai.SmallSetVar_begin(self, *args)

    def end(self, *args):
        return _dai.SmallSetVar_end(self, *args)

    def rbegin(self, *args):
        return _dai.SmallSetVar_rbegin(self, *args)

    def rend(self, *args):
        return _dai.SmallSetVar_rend(self, *args)

    def front(self, *args):
        return _dai.SmallSetVar_front(self, *args)

    def back(self, *args):
        return _dai.SmallSetVar_back(self, *args)

    def toString(self):
        return _dai.SmallSetVar_toString(self)

    def __str__(self):
        return _dai.SmallSetVar___str__(self)

    def __str(self):
        return _dai.SmallSetVar___str(self)
    __swig_destroy__ = _dai.delete_SmallSetVar

# Register SmallSetVar in _dai:
_dai.SmallSetVar_swigregister(SmallSetVar)

def __eq__(*args):
    return _dai.__eq__(*args)

def __ne__(*args):
    return _dai.__ne__(*args)

def __lt__(*args):
    return _dai.__lt__(*args)


def calcLinearState(vs, state):
    return _dai.calcLinearState(vs, state)

def calcState(vs, linearState):
    return _dai.calcState(vs, linearState)
class VarSet(SmallSetVar):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.VarSet_swiginit(self, _dai.new_VarSet(*args))

    def nrStates(self):
        return _dai.VarSet_nrStates(self)

    def toString(self):
        return _dai.VarSet_toString(self)

    def append(self, v):
        return _dai.VarSet_append(self, v)

    def __str__(self):
        return _dai.VarSet___str__(self)

    def __str(self):
        return _dai.VarSet___str(self)
    __swig_destroy__ = _dai.delete_VarSet

# Register VarSet in _dai:
_dai.VarSet_swigregister(VarSet)

class Prob(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.Prob_swiginit(self, _dai.new_Prob(*args))

    def begin(self, *args):
        return _dai.Prob_begin(self, *args)

    def end(self, *args):
        return _dai.Prob_end(self, *args)

    def rbegin(self, *args):
        return _dai.Prob_rbegin(self, *args)

    def rend(self, *args):
        return _dai.Prob_rend(self, *args)

    def resize(self, sz):
        return _dai.Prob_resize(self, sz)

    def get(self, i):
        return _dai.Prob_get(self, i)

    def set(self, i, val):
        return _dai.Prob_set(self, i, val)

    def p(self, *args):
        return _dai.Prob_p(self, *args)

    def size(self):
        return _dai.Prob_size(self)

    def entropy(self):
        return _dai.Prob_entropy(self)

    def max(self):
        return _dai.Prob_max(self)

    def min(self):
        return _dai.Prob_min(self)

    def sum(self):
        return _dai.Prob_sum(self)

    def sumAbs(self):
        return _dai.Prob_sumAbs(self)

    def maxAbs(self):
        return _dai.Prob_maxAbs(self)

    def hasNaNs(self):
        return _dai.Prob_hasNaNs(self)

    def hasNegatives(self):
        return _dai.Prob_hasNegatives(self)

    def argmax(self):
        return _dai.Prob_argmax(self)

    def draw(self):
        return _dai.Prob_draw(self)

    def __lt__(self, q):
        return _dai.Prob___lt__(self, q)

    def __eq__(self, q):
        return _dai.Prob___eq__(self, q)

    def toString(self):
        return _dai.Prob_toString(self)

    def __neg__(self):
        return _dai.Prob___neg__(self)

    def abs(self):
        return _dai.Prob_abs(self)

    def exp(self):
        return _dai.Prob_exp(self)

    def log(self, zero=False):
        return _dai.Prob_log(self, zero)

    def inverse(self, zero=True):
        return _dai.Prob_inverse(self, zero)

    def normalized(self, *args):
        return _dai.Prob_normalized(self, *args)

    def randomize(self):
        return _dai.Prob_randomize(self)

    def setUniform(self):
        return _dai.Prob_setUniform(self)

    def takeAbs(self):
        return _dai.Prob_takeAbs(self)

    def takeExp(self):
        return _dai.Prob_takeExp(self)

    def takeLog(self, zero=False):
        return _dai.Prob_takeLog(self, zero)

    def normalize(self, *args):
        return _dai.Prob_normalize(self, *args)

    def fill(self, x):
        return _dai.Prob_fill(self, x)

    def __iadd__(self, *args):
        return _dai.Prob___iadd__(self, *args)

    def __isub__(self, *args):
        return _dai.Prob___isub__(self, *args)

    def __imul__(self, *args):
        return _dai.Prob___imul__(self, *args)

    def __itruediv__(self, *args):
        return _dai.Prob___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def divide(self, q):
        return _dai.Prob_divide(self, q)

    def __ixor__(self, *args):
        return _dai.Prob___ixor__(self, *args)

    def __add__(self, *args):
        return _dai.Prob___add__(self, *args)

    def __sub__(self, *args):
        return _dai.Prob___sub__(self, *args)

    def __mul__(self, *args):
        return _dai.Prob___mul__(self, *args)

    def __truediv__(self, *args):
        return _dai.Prob___truediv__(self, *args)
    __div__ = __truediv__



    def divided_by(self, q):
        return _dai.Prob_divided_by(self, q)

    def __xor__(self, *args):
        return _dai.Prob___xor__(self, *args)

    def __getitem__(self, i):
        return _dai.Prob___getitem__(self, i)

    def __setitem__(self, i, d):
        return _dai.Prob___setitem__(self, i, d)

    def __paren__(self, i):
        return _dai.Prob___paren__(self, i)

    def __paren_asgn__(self, i, d):
        return _dai.Prob___paren_asgn__(self, i, d)

    def __str__(self):
        return _dai.Prob___str__(self)

    def __str(self):
        return _dai.Prob___str(self)
    __swig_destroy__ = _dai.delete_Prob

# Register Prob in _dai:
_dai.Prob_swigregister(Prob)


def createFactorIsing(*args):
    return _dai.createFactorIsing(*args)

def createFactorExpGauss(vs, beta):
    return _dai.createFactorExpGauss(vs, beta)

def createFactorPotts(x1, x2, J):
    return _dai.createFactorPotts(x1, x2, J)

def createFactorDelta(*args):
    return _dai.createFactorDelta(*args)
class Factor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.Factor_swiginit(self, _dai.new_Factor(*args))

    def set(self, i, val):
        return _dai.Factor_set(self, i, val)

    def get(self, i):
        return _dai.Factor_get(self, i)

    def p(self, *args):
        return _dai.Factor_p(self, *args)

    def vars(self, *args):
        return _dai.Factor_vars(self, *args)

    def nrStates(self):
        return _dai.Factor_nrStates(self)

    def entropy(self):
        return _dai.Factor_entropy(self)

    def max(self):
        return _dai.Factor_max(self)

    def min(self):
        return _dai.Factor_min(self)

    def sum(self):
        return _dai.Factor_sum(self)

    def sumAbs(self):
        return _dai.Factor_sumAbs(self)

    def maxAbs(self):
        return _dai.Factor_maxAbs(self)

    def hasNaNs(self):
        return _dai.Factor_hasNaNs(self)

    def hasNegatives(self):
        return _dai.Factor_hasNegatives(self)

    def strength(self, i, j):
        return _dai.Factor_strength(self, i, j)

    def __eq__(self, y):
        return _dai.Factor___eq__(self, y)

    def toString(self):
        return _dai.Factor_toString(self)

    def __neg__(self):
        return _dai.Factor___neg__(self)

    def abs(self):
        return _dai.Factor_abs(self)

    def exp(self):
        return _dai.Factor_exp(self)

    def log(self, zero=False):
        return _dai.Factor_log(self, zero)

    def inverse(self, zero=True):
        return _dai.Factor_inverse(self, zero)

    def normalized(self, *args):
        return _dai.Factor_normalized(self, *args)

    def randomize(self):
        return _dai.Factor_randomize(self)

    def setUniform(self):
        return _dai.Factor_setUniform(self)

    def takeAbs(self):
        return _dai.Factor_takeAbs(self)

    def takeExp(self):
        return _dai.Factor_takeExp(self)

    def takeLog(self, zero=False):
        return _dai.Factor_takeLog(self, zero)

    def normalize(self, *args):
        return _dai.Factor_normalize(self, *args)

    def fill(self, x):
        return _dai.Factor_fill(self, x)

    def __ixor__(self, x):
        return _dai.Factor___ixor__(self, x)

    def __xor__(self, x):
        return _dai.Factor___xor__(self, x)

    def __iadd__(self, *args):
        return _dai.Factor___iadd__(self, *args)

    def __isub__(self, *args):
        return _dai.Factor___isub__(self, *args)

    def __imul__(self, *args):
        return _dai.Factor___imul__(self, *args)

    def __itruediv__(self, *args):
        return _dai.Factor___itruediv__(self, *args)
    __idiv__ = __itruediv__



    def __add__(self, *args):
        return _dai.Factor___add__(self, *args)

    def __sub__(self, *args):
        return _dai.Factor___sub__(self, *args)

    def __mul__(self, *args):
        return _dai.Factor___mul__(self, *args)

    def __truediv__(self, *args):
        return _dai.Factor___truediv__(self, *args)
    __div__ = __truediv__



    def slice(self, vars, varsState):
        return _dai.Factor_slice(self, vars, varsState)

    def embed(self, vars):
        return _dai.Factor_embed(self, vars)

    def marginal(self, vars, normed=True):
        return _dai.Factor_marginal(self, vars, normed)

    def maxMarginal(self, vars, normed=True):
        return _dai.Factor_maxMarginal(self, vars, normed)

    def __getitem__(self, i):
        return _dai.Factor___getitem__(self, i)

    def __setitem__(self, i, d):
        return _dai.Factor___setitem__(self, i, d)

    def __paren__(self, i):
        return _dai.Factor___paren__(self, i)

    def __paren_asgn__(self, i, d):
        return _dai.Factor___paren_asgn__(self, i, d)

    def __str__(self):
        return _dai.Factor___str__(self)

    def __str(self):
        return _dai.Factor___str(self)
    __swig_destroy__ = _dai.delete_Factor

# Register Factor in _dai:
_dai.Factor_swigregister(Factor)

class VecFactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dai.VecFactor_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dai.VecFactor___nonzero__(self)

    def __bool__(self):
        return _dai.VecFactor___bool__(self)

    def __len__(self):
        return _dai.VecFactor___len__(self)

    def __getslice__(self, i, j):
        return _dai.VecFactor___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dai.VecFactor___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dai.VecFactor___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dai.VecFactor___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dai.VecFactor___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dai.VecFactor___setitem__(self, *args)

    def pop(self):
        return _dai.VecFactor_pop(self)

    def append(self, x):
        return _dai.VecFactor_append(self, x)

    def empty(self):
        return _dai.VecFactor_empty(self)

    def size(self):
        return _dai.VecFactor_size(self)

    def swap(self, v):
        return _dai.VecFactor_swap(self, v)

    def begin(self):
        return _dai.VecFactor_begin(self)

    def end(self):
        return _dai.VecFactor_end(self)

    def rbegin(self):
        return _dai.VecFactor_rbegin(self)

    def rend(self):
        return _dai.VecFactor_rend(self)

    def clear(self):
        return _dai.VecFactor_clear(self)

    def get_allocator(self):
        return _dai.VecFactor_get_allocator(self)

    def pop_back(self):
        return _dai.VecFactor_pop_back(self)

    def erase(self, *args):
        return _dai.VecFactor_erase(self, *args)

    def __init__(self, *args):
        _dai.VecFactor_swiginit(self, _dai.new_VecFactor(*args))

    def push_back(self, x):
        return _dai.VecFactor_push_back(self, x)

    def front(self):
        return _dai.VecFactor_front(self)

    def back(self):
        return _dai.VecFactor_back(self)

    def assign(self, n, x):
        return _dai.VecFactor_assign(self, n, x)

    def resize(self, *args):
        return _dai.VecFactor_resize(self, *args)

    def insert(self, *args):
        return _dai.VecFactor_insert(self, *args)

    def reserve(self, n):
        return _dai.VecFactor_reserve(self, n)

    def capacity(self):
        return _dai.VecFactor_capacity(self)
    __swig_destroy__ = _dai.delete_VecFactor

# Register VecFactor in _dai:
_dai.VecFactor_swigregister(VecFactor)

class VecVecFactor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _dai.VecVecFactor_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _dai.VecVecFactor___nonzero__(self)

    def __bool__(self):
        return _dai.VecVecFactor___bool__(self)

    def __len__(self):
        return _dai.VecVecFactor___len__(self)

    def __getslice__(self, i, j):
        return _dai.VecVecFactor___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _dai.VecVecFactor___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _dai.VecVecFactor___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _dai.VecVecFactor___delitem__(self, *args)

    def __getitem__(self, *args):
        return _dai.VecVecFactor___getitem__(self, *args)

    def __setitem__(self, *args):
        return _dai.VecVecFactor___setitem__(self, *args)

    def pop(self):
        return _dai.VecVecFactor_pop(self)

    def append(self, x):
        return _dai.VecVecFactor_append(self, x)

    def empty(self):
        return _dai.VecVecFactor_empty(self)

    def size(self):
        return _dai.VecVecFactor_size(self)

    def swap(self, v):
        return _dai.VecVecFactor_swap(self, v)

    def begin(self):
        return _dai.VecVecFactor_begin(self)

    def end(self):
        return _dai.VecVecFactor_end(self)

    def rbegin(self):
        return _dai.VecVecFactor_rbegin(self)

    def rend(self):
        return _dai.VecVecFactor_rend(self)

    def clear(self):
        return _dai.VecVecFactor_clear(self)

    def get_allocator(self):
        return _dai.VecVecFactor_get_allocator(self)

    def pop_back(self):
        return _dai.VecVecFactor_pop_back(self)

    def erase(self, *args):
        return _dai.VecVecFactor_erase(self, *args)

    def __init__(self, *args):
        _dai.VecVecFactor_swiginit(self, _dai.new_VecVecFactor(*args))

    def push_back(self, x):
        return _dai.VecVecFactor_push_back(self, x)

    def front(self):
        return _dai.VecVecFactor_front(self)

    def back(self):
        return _dai.VecVecFactor_back(self)

    def assign(self, n, x):
        return _dai.VecVecFactor_assign(self, n, x)

    def resize(self, *args):
        return _dai.VecVecFactor_resize(self, *args)

    def insert(self, *args):
        return _dai.VecVecFactor_insert(self, *args)

    def reserve(self, n):
        return _dai.VecVecFactor_reserve(self, n)

    def capacity(self):
        return _dai.VecVecFactor_capacity(self)
    __swig_destroy__ = _dai.delete_VecVecFactor

# Register VecVecFactor in _dai:
_dai.VecVecFactor_swigregister(VecVecFactor)

class Neighbor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    iter = property(_dai.Neighbor_iter_get, _dai.Neighbor_iter_set)
    node = property(_dai.Neighbor_node_get, _dai.Neighbor_node_set)
    dual = property(_dai.Neighbor_dual_get, _dai.Neighbor_dual_set)

    def __init__(self, *args):
        _dai.Neighbor_swiginit(self, _dai.new_Neighbor(*args))

    def toInt(self):
        return _dai.Neighbor_toInt(self)
    __swig_destroy__ = _dai.delete_Neighbor

# Register Neighbor in _dai:
_dai.Neighbor_swigregister(Neighbor)

class GraphAL(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.GraphAL_swiginit(self, _dai.new_GraphAL(*args))

    def nb(self, *args):
        return _dai.GraphAL_nb(self, *args)

    def addNode(self):
        return _dai.GraphAL_addNode(self)

    def addEdge(self, n1, n2, check=True):
        return _dai.GraphAL_addEdge(self, n1, n2, check)

    def eraseNode(self, n):
        return _dai.GraphAL_eraseNode(self, n)

    def eraseEdge(self, n1, n2):
        return _dai.GraphAL_eraseEdge(self, n1, n2)

    def nrNodes(self):
        return _dai.GraphAL_nrNodes(self)

    def nrEdges(self):
        return _dai.GraphAL_nrEdges(self)

    def hasEdge(self, n1, n2):
        return _dai.GraphAL_hasEdge(self, n1, n2)

    def findNb(self, n1, n2):
        return _dai.GraphAL_findNb(self, n1, n2)

    def nbSet(self, n):
        return _dai.GraphAL_nbSet(self, n)

    def isConnected(self):
        return _dai.GraphAL_isConnected(self)

    def isTree(self):
        return _dai.GraphAL_isTree(self)

    def checkConsistency(self):
        return _dai.GraphAL_checkConsistency(self)

    def __eq__(self, x):
        return _dai.GraphAL___eq__(self, x)

    def printDot(self, os):
        return _dai.GraphAL_printDot(self, os)

    def toString(self):
        return _dai.GraphAL_toString(self)

    def __str__(self):
        return _dai.GraphAL___str__(self)

    def __str(self):
        return _dai.GraphAL___str(self)
    __swig_destroy__ = _dai.delete_GraphAL

# Register GraphAL in _dai:
_dai.GraphAL_swigregister(GraphAL)


def createGraphFull(N):
    return _dai.createGraphFull(N)

def createGraphGrid(N1, N2, periodic):
    return _dai.createGraphGrid(N1, N2, periodic)

def createGraphGrid3D(N1, N2, N3, periodic):
    return _dai.createGraphGrid3D(N1, N2, N3, periodic)

def createGraphLoop(N):
    return _dai.createGraphLoop(N)

def createGraphTree(N):
    return _dai.createGraphTree(N)

def createGraphRegular(N, d):
    return _dai.createGraphRegular(N, d)
class BipartiteGraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.BipartiteGraph_swiginit(self, _dai.new_BipartiteGraph(*args))

    def nb1(self, *args):
        return _dai.BipartiteGraph_nb1(self, *args)

    def nb2(self, *args):
        return _dai.BipartiteGraph_nb2(self, *args)

    def addNode1(self):
        return _dai.BipartiteGraph_addNode1(self)

    def addNode2(self):
        return _dai.BipartiteGraph_addNode2(self)

    def addEdge(self, n1, n2, check=True):
        return _dai.BipartiteGraph_addEdge(self, n1, n2, check)

    def eraseNode1(self, n1):
        return _dai.BipartiteGraph_eraseNode1(self, n1)

    def eraseNode2(self, n2):
        return _dai.BipartiteGraph_eraseNode2(self, n2)

    def eraseEdge(self, n1, n2):
        return _dai.BipartiteGraph_eraseEdge(self, n1, n2)

    def nrNodes1(self):
        return _dai.BipartiteGraph_nrNodes1(self)

    def nrNodes2(self):
        return _dai.BipartiteGraph_nrNodes2(self)

    def nrEdges(self):
        return _dai.BipartiteGraph_nrEdges(self)

    def hasEdge(self, n1, n2):
        return _dai.BipartiteGraph_hasEdge(self, n1, n2)

    def findNb1(self, n1, n2):
        return _dai.BipartiteGraph_findNb1(self, n1, n2)

    def findNb2(self, n1, n2):
        return _dai.BipartiteGraph_findNb2(self, n1, n2)

    def nb1Set(self, n1):
        return _dai.BipartiteGraph_nb1Set(self, n1)

    def nb2Set(self, n2):
        return _dai.BipartiteGraph_nb2Set(self, n2)

    def delta1(self, n1, include=False):
        return _dai.BipartiteGraph_delta1(self, n1, include)

    def delta2(self, n2, include=False):
        return _dai.BipartiteGraph_delta2(self, n2, include)

    def isConnected(self):
        return _dai.BipartiteGraph_isConnected(self)

    def isTree(self):
        return _dai.BipartiteGraph_isTree(self)

    def __eq__(self, x):
        return _dai.BipartiteGraph___eq__(self, x)

    def checkConsistency(self):
        return _dai.BipartiteGraph_checkConsistency(self)

    def printDot(self, os):
        return _dai.BipartiteGraph_printDot(self, os)

    def toString(self):
        return _dai.BipartiteGraph_toString(self)

    def __str__(self):
        return _dai.BipartiteGraph___str__(self)

    def __str(self):
        return _dai.BipartiteGraph___str(self)
    __swig_destroy__ = _dai.delete_BipartiteGraph

# Register BipartiteGraph in _dai:
_dai.BipartiteGraph_swigregister(BipartiteGraph)

class FactorGraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.FactorGraph_swiginit(self, _dai.new_FactorGraph(*args))
    __swig_destroy__ = _dai.delete_FactorGraph

    def clone(self):
        return _dai.FactorGraph_clone(self)

    def var(self, i):
        return _dai.FactorGraph_var(self, i)

    def vars(self):
        return _dai.FactorGraph_vars(self)

    def factor(self, I):
        return _dai.FactorGraph_factor(self, I)

    def factors(self):
        return _dai.FactorGraph_factors(self)

    def nbV(self, *args):
        return _dai.FactorGraph_nbV(self, *args)

    def nbF(self, *args):
        return _dai.FactorGraph_nbF(self, *args)

    def bipGraph(self):
        return _dai.FactorGraph_bipGraph(self)

    def nrVars(self):
        return _dai.FactorGraph_nrVars(self)

    def nrFactors(self):
        return _dai.FactorGraph_nrFactors(self)

    def nrEdges(self):
        return _dai.FactorGraph_nrEdges(self)

    def findVar(self, n):
        return _dai.FactorGraph_findVar(self, n)

    def findVars(self, ns):
        return _dai.FactorGraph_findVars(self, ns)

    def findFactor(self, ns):
        return _dai.FactorGraph_findFactor(self, ns)

    def inds2vars(self, inds):
        return _dai.FactorGraph_inds2vars(self, inds)

    def Delta(self, *args):
        return _dai.FactorGraph_Delta(self, *args)

    def delta(self, *args):
        return _dai.FactorGraph_delta(self, *args)

    def Deltai(self, i):
        return _dai.FactorGraph_Deltai(self, i)

    def deltai(self, i):
        return _dai.FactorGraph_deltai(self, i)

    def isConnected(self):
        return _dai.FactorGraph_isConnected(self)

    def isTree(self):
        return _dai.FactorGraph_isTree(self)

    def isPairwise(self):
        return _dai.FactorGraph_isPairwise(self)

    def isBinary(self):
        return _dai.FactorGraph_isBinary(self)

    def MarkovGraph(self):
        return _dai.FactorGraph_MarkovGraph(self)

    def isMaximal(self, I):
        return _dai.FactorGraph_isMaximal(self, I)

    def maximalFactor(self, I):
        return _dai.FactorGraph_maximalFactor(self, I)

    def maximalFactorDomains(self):
        return _dai.FactorGraph_maximalFactorDomains(self)

    def logScore(self, statevec):
        return _dai.FactorGraph_logScore(self, statevec)

    def setFactor(self, I, newFactor, backup=False):
        return _dai.FactorGraph_setFactor(self, I, newFactor, backup)

    def setFactors(self, facs, backup=False):
        return _dai.FactorGraph_setFactors(self, facs, backup)

    def backupFactor(self, I):
        return _dai.FactorGraph_backupFactor(self, I)

    def restoreFactor(self, I):
        return _dai.FactorGraph_restoreFactor(self, I)

    def backupFactors(self, *args):
        return _dai.FactorGraph_backupFactors(self, *args)

    def restoreFactors(self, *args):
        return _dai.FactorGraph_restoreFactors(self, *args)

    def maximalFactors(self):
        return _dai.FactorGraph_maximalFactors(self)

    def clamped(self, i, x):
        return _dai.FactorGraph_clamped(self, i, x)

    def clamp(self, i, x, backup=False):
        return _dai.FactorGraph_clamp(self, i, x, backup)

    def clampVar(self, i, xis, backup=False):
        return _dai.FactorGraph_clampVar(self, i, xis, backup)

    def clampFactor(self, I, xIs, backup=False):
        return _dai.FactorGraph_clampFactor(self, I, xIs, backup)

    def makeCavity(self, i, backup=False):
        return _dai.FactorGraph_makeCavity(self, i, backup)

    def makeRegionCavity(self, facInds, backup):
        return _dai.FactorGraph_makeRegionCavity(self, facInds, backup)

    def ReadFromFile(self, filename):
        return _dai.FactorGraph_ReadFromFile(self, filename)

    def WriteToFile(self, filename, precision=15):
        return _dai.FactorGraph_WriteToFile(self, filename, precision)

    def toString(self):
        return _dai.FactorGraph_toString(self)

    def fromString(self, s):
        return _dai.FactorGraph_fromString(self, s)

    def __str__(self):
        return _dai.FactorGraph___str__(self)

    def __str(self):
        return _dai.FactorGraph___str(self)

    def printDot(self, *args):
        return _dai.FactorGraph_printDot(self, *args)

# Register FactorGraph in _dai:
_dai.FactorGraph_swigregister(FactorGraph)

class Region(VarSet):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.Region_swiginit(self, _dai.new_Region(*args))

    def c(self, *args):
        return _dai.Region_c(self, *args)
    __swig_destroy__ = _dai.delete_Region

# Register Region in _dai:
_dai.Region_swigregister(Region)

class FRegion(Factor):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.FRegion_swiginit(self, _dai.new_FRegion(*args))

    def c(self, *args):
        return _dai.FRegion_c(self, *args)
    __swig_destroy__ = _dai.delete_FRegion

# Register FRegion in _dai:
_dai.FRegion_swigregister(FRegion)

class RegionGraph(FactorGraph):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.RegionGraph_swiginit(self, _dai.new_RegionGraph(*args))

    def clone(self):
        return _dai.RegionGraph_clone(self)

    def nrORs(self):
        return _dai.RegionGraph_nrORs(self)

    def nrIRs(self):
        return _dai.RegionGraph_nrIRs(self)

    def OR(self, *args):
        return _dai.RegionGraph_OR(self, *args)

    def IR(self, *args):
        return _dai.RegionGraph_IR(self, *args)

    def fac2OR(self, I):
        return _dai.RegionGraph_fac2OR(self, I)

    def nbOR(self, alpha):
        return _dai.RegionGraph_nbOR(self, alpha)

    def nbIR(self, beta):
        return _dai.RegionGraph_nbIR(self, beta)

    def DAG(self):
        return _dai.RegionGraph_DAG(self)

    def checkCountingNumbers(self):
        return _dai.RegionGraph_checkCountingNumbers(self)

    def setFactor(self, I, newFactor, backup=False):
        return _dai.RegionGraph_setFactor(self, I, newFactor, backup)

    def setFactors(self, facs, backup=False):
        return _dai.RegionGraph_setFactors(self, facs, backup)

    def ReadFromFile(self, arg2):
        return _dai.RegionGraph_ReadFromFile(self, arg2)

    def WriteToFile(self, arg2, arg3=15):
        return _dai.RegionGraph_WriteToFile(self, arg2, arg3)

    def toString(self):
        return _dai.RegionGraph_toString(self)

    def printDot(self, arg2):
        return _dai.RegionGraph_printDot(self, arg2)

    def __str__(self):
        return _dai.RegionGraph___str__(self)

    def __str(self):
        return _dai.RegionGraph___str(self)
    __swig_destroy__ = _dai.delete_RegionGraph

# Register RegionGraph in _dai:
_dai.RegionGraph_swigregister(RegionGraph)

class PairIntBigInt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.PairIntBigInt_swiginit(self, _dai.new_PairIntBigInt(*args))
    first = property(_dai.PairIntBigInt_first_get, _dai.PairIntBigInt_first_set)
    second = property(_dai.PairIntBigInt_second_get, _dai.PairIntBigInt_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _dai.delete_PairIntBigInt

# Register PairIntBigInt in _dai:
_dai.PairIntBigInt_swigregister(PairIntBigInt)

eliminationCost_MinNeighbors = _dai.eliminationCost_MinNeighbors
eliminationCost_MinWeight = _dai.eliminationCost_MinWeight
eliminationCost_MinFill = _dai.eliminationCost_MinFill
eliminationCost_WeightedMinFill = _dai.eliminationCost_WeightedMinFill
class ClusterGraph(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.ClusterGraph_swiginit(self, _dai.new_ClusterGraph(*args))

    def bipGraph(self):
        return _dai.ClusterGraph_bipGraph(self)

    def nrVars(self):
        return _dai.ClusterGraph_nrVars(self)

    def vars(self):
        return _dai.ClusterGraph_vars(self)

    def var(self, i):
        return _dai.ClusterGraph_var(self, i)

    def nrClusters(self):
        return _dai.ClusterGraph_nrClusters(self)

    def clusters(self):
        return _dai.ClusterGraph_clusters(self)

    def cluster(self, I):
        return _dai.ClusterGraph_cluster(self, I)

    def findVar(self, n):
        return _dai.ClusterGraph_findVar(self, n)

    def findCluster(self, cl):
        return _dai.ClusterGraph_findCluster(self, cl)

    def Delta(self, i):
        return _dai.ClusterGraph_Delta(self, i)

    def delta(self, i):
        return _dai.ClusterGraph_delta(self, i)

    def adj(self, i1, i2):
        return _dai.ClusterGraph_adj(self, i1, i2)

    def isMaximal(self, I):
        return _dai.ClusterGraph_isMaximal(self, I)

    def insert(self, cl):
        return _dai.ClusterGraph_insert(self, cl)

    def eraseNonMaximal(self):
        return _dai.ClusterGraph_eraseNonMaximal(self)

    def eraseSubsuming(self, i):
        return _dai.ClusterGraph_eraseSubsuming(self, i)

    def elimVar(self, i):
        return _dai.ClusterGraph_elimVar(self, i)

    def toString(self):
        return _dai.ClusterGraph_toString(self)
    __swig_destroy__ = _dai.delete_ClusterGraph

# Register ClusterGraph in _dai:
_dai.ClusterGraph_swigregister(ClusterGraph)

class sequentialVariableElimination(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, s):
        _dai.sequentialVariableElimination_swiginit(self, _dai.new_sequentialVariableElimination(s))

    def __call__(self, cl, arg3):
        return _dai.sequentialVariableElimination___call__(self, cl, arg3)
    __swig_destroy__ = _dai.delete_sequentialVariableElimination

# Register sequentialVariableElimination in _dai:
_dai.sequentialVariableElimination_swigregister(sequentialVariableElimination)

class greedyVariableElimination(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, h):
        _dai.greedyVariableElimination_swiginit(self, _dai.new_greedyVariableElimination(h))

    def __call__(self, cl, remainingVars):
        return _dai.greedyVariableElimination___call__(self, cl, remainingVars)
    __swig_destroy__ = _dai.delete_greedyVariableElimination

# Register greedyVariableElimination in _dai:
_dai.greedyVariableElimination_swigregister(greedyVariableElimination)


def __lshift__(os, p):
    return _dai.__lshift__(os, p)
class PropertySet(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.PropertySet_swiginit(self, _dai.new_PropertySet(*args))

    def set(self, *args):
        return _dai.PropertySet_set(self, *args)

    def __call__(self, key, val):
        return _dai.PropertySet___call__(self, key, val)

    def size(self):
        return _dai.PropertySet_size(self)

    def clear(self):
        return _dai.PropertySet_clear(self)

    def erase(self, key):
        return _dai.PropertySet_erase(self, key)

    def hasKey(self, key):
        return _dai.PropertySet_hasKey(self, key)

    def keys(self):
        return _dai.PropertySet_keys(self)

    def get(self, key):
        return _dai.PropertySet_get(self, key)

    def toString(self):
        return _dai.PropertySet_toString(self)

    def fromString(self, s):
        return _dai.PropertySet_fromString(self, s)

    def __setitem__(self, name, val):
        return _dai.PropertySet___setitem__(self, name, val)

    def __str__(self):
        return _dai.PropertySet___str__(self)

    def __str(self):
        return _dai.PropertySet___str(self)
    __swig_destroy__ = _dai.delete_PropertySet

# Register PropertySet in _dai:
_dai.PropertySet_swigregister(PropertySet)

class IndexFor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.IndexFor_swiginit(self, _dai.new_IndexFor(*args))

    def reset(self):
        return _dai.IndexFor_reset(self)

    def toInt(self):
        return _dai.IndexFor_toInt(self)

    def valid(self):
        return _dai.IndexFor_valid(self)

    def next(self):
        return _dai.IndexFor_next(self)
    __swig_destroy__ = _dai.delete_IndexFor

# Register IndexFor in _dai:
_dai.IndexFor_swigregister(IndexFor)

class Permute(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.Permute_swiginit(self, _dai.new_Permute(*args))

    def convertLinearIndex(self, li):
        return _dai.Permute_convertLinearIndex(self, li)

    def sigma(self, *args):
        return _dai.Permute_sigma(self, *args)

    def ranges(self):
        return _dai.Permute_ranges(self)

    def inverse(self):
        return _dai.Permute_inverse(self)

    def __getitem__(self, i):
        return _dai.Permute___getitem__(self, i)

    def __paren__(self, i):
        return _dai.Permute___paren__(self, i)
    __swig_destroy__ = _dai.delete_Permute

# Register Permute in _dai:
_dai.Permute_swigregister(Permute)

class multifor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.multifor_swiginit(self, _dai.new_multifor(*args))

    def toInt(self):
        return _dai.multifor_toInt(self)

    def reset(self):
        return _dai.multifor_reset(self)

    def valid(self):
        return _dai.multifor_valid(self)

    def next(self):
        return _dai.multifor_next(self)

    def __getitem__(self, i):
        return _dai.multifor___getitem__(self, i)

    def __paren__(self, i):
        return _dai.multifor___paren__(self, i)
    __swig_destroy__ = _dai.delete_multifor

# Register multifor in _dai:
_dai.multifor_swigregister(multifor)

class State(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.State_swiginit(self, _dai.new_State(*args))

    def begin(self):
        return _dai.State_begin(self)

    def end(self):
        return _dai.State_end(self)

    def toInt(self):
        return _dai.State_toInt(self)

    def get(self):
        return _dai.State_get(self)

    def __call__(self, *args):
        return _dai.State___call__(self, *args)

    def valid(self):
        return _dai.State_valid(self)

    def reset(self):
        return _dai.State_reset(self)

    def next(self):
        return _dai.State_next(self)
    __swig_destroy__ = _dai.delete_State

# Register State in _dai:
_dai.State_swigregister(State)

class InfAlg(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _dai.delete_InfAlg

    def clone(self):
        return _dai.InfAlg_clone(self)

    def construct(self, fg, opts):
        return _dai.InfAlg_construct(self, fg, opts)

    def name(self):
        return _dai.InfAlg_name(self)

    def identify(self):
        return _dai.InfAlg_identify(self)

    def fg(self, *args):
        return _dai.InfAlg_fg(self, *args)

    def init(self, *args):
        return _dai.InfAlg_init(self, *args)

    def run(self):
        return _dai.InfAlg_run(self)

    def belief(self, *args):
        return _dai.InfAlg_belief(self, *args)

    def beliefV(self, i):
        return _dai.InfAlg_beliefV(self, i)

    def beliefF(self, I):
        return _dai.InfAlg_beliefF(self, I)

    def beliefs(self):
        return _dai.InfAlg_beliefs(self)

    def logZ(self):
        return _dai.InfAlg_logZ(self)

    def findMaximum(self):
        return _dai.InfAlg_findMaximum(self)

    def maxDiff(self):
        return _dai.InfAlg_maxDiff(self)

    def Iterations(self):
        return _dai.InfAlg_Iterations(self)

    def setMaxIter(self, arg2):
        return _dai.InfAlg_setMaxIter(self, arg2)

    def clamp(self, i, x, backup=False):
        return _dai.InfAlg_clamp(self, i, x, backup)

    def makeCavity(self, i, backup=False):
        return _dai.InfAlg_makeCavity(self, i, backup)

    def makeRegionCavity(self, facInds, backup=False):
        return _dai.InfAlg_makeRegionCavity(self, facInds, backup)

    def backupFactor(self, I):
        return _dai.InfAlg_backupFactor(self, I)

    def backupFactors(self, vs):
        return _dai.InfAlg_backupFactors(self, vs)

    def restoreFactor(self, I):
        return _dai.InfAlg_restoreFactor(self, I)

    def restoreFactors(self, vs):
        return _dai.InfAlg_restoreFactors(self, vs)

    def setProperties(self, opts):
        return _dai.InfAlg_setProperties(self, opts)

    def getProperties(self):
        return _dai.InfAlg_getProperties(self)

    def printProperties(self):
        return _dai.InfAlg_printProperties(self)

# Register InfAlg in _dai:
_dai.InfAlg_swigregister(InfAlg)


def calcMarginal(obj, vs, reInit):
    return _dai.calcMarginal(obj, vs, reInit)

def calcPairBeliefs(obj, vs, reInit, accurate=False):
    return _dai.calcPairBeliefs(obj, vs, reInit, accurate)

def findMaximum(obj):
    return _dai.findMaximum(obj)

def builtinInfAlgs():
    return _dai.builtinInfAlgs()

def builtinInfAlgNames():
    return _dai.builtinInfAlgNames()

def newInfAlg(name, fg, opts):
    return _dai.newInfAlg(name, fg, opts)

def newInfAlgFromString(*args):
    return _dai.newInfAlgFromString(*args)

def parseNameProperties(*args):
    return _dai.parseNameProperties(*args)

def readAliasesFile(filename):
    return _dai.readAliasesFile(filename)
class BP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    props = property(_dai.BP_props_get, _dai.BP_props_set)
    recordSentMessages = property(_dai.BP_recordSentMessages_get, _dai.BP_recordSentMessages_set)

    def __init__(self, *args):
        _dai.BP_swiginit(self, _dai.new_BP(*args))

    def clone(self):
        return _dai.BP_clone(self)

    def construct(self, fg, opts):
        return _dai.BP_construct(self, fg, opts)

    def name(self):
        return _dai.BP_name(self)

    def belief(self, *args):
        return _dai.BP_belief(self, *args)

    def beliefV(self, i):
        return _dai.BP_beliefV(self, i)

    def beliefF(self, I):
        return _dai.BP_beliefF(self, I)

    def beliefs(self):
        return _dai.BP_beliefs(self)

    def logZ(self):
        return _dai.BP_logZ(self)

    def findMaximum(self):
        return _dai.BP_findMaximum(self)

    def init(self, *args):
        return _dai.BP_init(self, *args)

    def run(self):
        return _dai.BP_run(self)

    def maxDiff(self):
        return _dai.BP_maxDiff(self)

    def Iterations(self):
        return _dai.BP_Iterations(self)

    def setMaxIter(self, maxiter):
        return _dai.BP_setMaxIter(self, maxiter)

    def setProperties(self, opts):
        return _dai.BP_setProperties(self, opts)

    def getProperties(self):
        return _dai.BP_getProperties(self)

    def printProperties(self):
        return _dai.BP_printProperties(self)

    def getSentMessages(self):
        return _dai.BP_getSentMessages(self)

    def clearSentMessages(self):
        return _dai.BP_clearSentMessages(self)
    __swig_destroy__ = _dai.delete_BP

# Register BP in _dai:
_dai.BP_swigregister(BP)

class FBP(BP):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.FBP_swiginit(self, _dai.new_FBP(*args))

    def clone(self):
        return _dai.FBP_clone(self)

    def construct(self, fg, opts):
        return _dai.FBP_construct(self, fg, opts)

    def name(self):
        return _dai.FBP_name(self)

    def logZ(self):
        return _dai.FBP_logZ(self)

    def Weight(self, I):
        return _dai.FBP_Weight(self, I)

    def Weights(self):
        return _dai.FBP_Weights(self)

    def setWeight(self, I, c):
        return _dai.FBP_setWeight(self, I, c)

    def setWeights(self, c):
        return _dai.FBP_setWeights(self, c)
    __swig_destroy__ = _dai.delete_FBP

# Register FBP in _dai:
_dai.FBP_swigregister(FBP)

class TRWBP(BP):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    nrtrees = property(_dai.TRWBP_nrtrees_get, _dai.TRWBP_nrtrees_set)

    def __init__(self, *args):
        _dai.TRWBP_swiginit(self, _dai.new_TRWBP(*args))

    def clone(self):
        return _dai.TRWBP_clone(self)

    def construct(self, fg, opts):
        return _dai.TRWBP_construct(self, fg, opts)

    def name(self):
        return _dai.TRWBP_name(self)

    def logZ(self):
        return _dai.TRWBP_logZ(self)

    def setProperties(self, opts):
        return _dai.TRWBP_setProperties(self, opts)

    def getProperties(self):
        return _dai.TRWBP_getProperties(self)

    def printProperties(self):
        return _dai.TRWBP_printProperties(self)

    def Weight(self, I):
        return _dai.TRWBP_Weight(self, I)

    def Weights(self):
        return _dai.TRWBP_Weights(self)

    def setWeight(self, I, c):
        return _dai.TRWBP_setWeight(self, I, c)

    def setWeights(self, c):
        return _dai.TRWBP_setWeights(self, c)

    def addTreeToWeights(self, tree):
        return _dai.TRWBP_addTreeToWeights(self, tree)

    def sampleWeights(self, nrTrees):
        return _dai.TRWBP_sampleWeights(self, nrTrees)
    __swig_destroy__ = _dai.delete_TRWBP

# Register TRWBP in _dai:
_dai.TRWBP_swigregister(TRWBP)

class MF(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    props = property(_dai.MF_props_get, _dai.MF_props_set)

    def __init__(self, *args):
        _dai.MF_swiginit(self, _dai.new_MF(*args))

    def clone(self):
        return _dai.MF_clone(self)

    def construct(self, fg, opts):
        return _dai.MF_construct(self, fg, opts)

    def name(self):
        return _dai.MF_name(self)

    def belief(self, *args):
        return _dai.MF_belief(self, *args)

    def beliefV(self, i):
        return _dai.MF_beliefV(self, i)

    def beliefs(self):
        return _dai.MF_beliefs(self)

    def logZ(self):
        return _dai.MF_logZ(self)

    def init(self, *args):
        return _dai.MF_init(self, *args)

    def run(self):
        return _dai.MF_run(self)

    def maxDiff(self):
        return _dai.MF_maxDiff(self)

    def Iterations(self):
        return _dai.MF_Iterations(self)

    def setMaxIter(self, maxiter):
        return _dai.MF_setMaxIter(self, maxiter)

    def setProperties(self, opts):
        return _dai.MF_setProperties(self, opts)

    def getProperties(self):
        return _dai.MF_getProperties(self)

    def printProperties(self):
        return _dai.MF_printProperties(self)
    __swig_destroy__ = _dai.delete_MF

# Register MF in _dai:
_dai.MF_swigregister(MF)

class HAK(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    props = property(_dai.HAK_props_get, _dai.HAK_props_set)

    def __init__(self, *args):
        _dai.HAK_swiginit(self, _dai.new_HAK(*args))

    def clone(self):
        return _dai.HAK_clone(self)

    def construct(self, fg, opts):
        return _dai.HAK_construct(self, fg, opts)

    def name(self):
        return _dai.HAK_name(self)

    def belief(self, vs):
        return _dai.HAK_belief(self, vs)

    def beliefs(self):
        return _dai.HAK_beliefs(self)

    def logZ(self):
        return _dai.HAK_logZ(self)

    def init(self, *args):
        return _dai.HAK_init(self, *args)

    def run(self):
        return _dai.HAK_run(self)

    def maxDiff(self):
        return _dai.HAK_maxDiff(self)

    def Iterations(self):
        return _dai.HAK_Iterations(self)

    def setMaxIter(self, maxiter):
        return _dai.HAK_setMaxIter(self, maxiter)

    def setProperties(self, opts):
        return _dai.HAK_setProperties(self, opts)

    def getProperties(self):
        return _dai.HAK_getProperties(self)

    def printProperties(self):
        return _dai.HAK_printProperties(self)

    def muab(self, alpha, _beta):
        return _dai.HAK_muab(self, alpha, _beta)

    def muba(self, alpha, _beta):
        return _dai.HAK_muba(self, alpha, _beta)

    def Qa(self, alpha):
        return _dai.HAK_Qa(self, alpha)

    def Qb(self, beta):
        return _dai.HAK_Qb(self, beta)

    def doGBP(self):
        return _dai.HAK_doGBP(self)

    def doDoubleLoop(self):
        return _dai.HAK_doDoubleLoop(self)
    __swig_destroy__ = _dai.delete_HAK

# Register HAK in _dai:
_dai.HAK_swigregister(HAK)

class LC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    props = property(_dai.LC_props_get, _dai.LC_props_set)

    def __init__(self, *args):
        _dai.LC_swiginit(self, _dai.new_LC(*args))

    def clone(self):
        return _dai.LC_clone(self)

    def construct(self, fg, opts):
        return _dai.LC_construct(self, fg, opts)

    def name(self):
        return _dai.LC_name(self)

    def belief(self, *args):
        return _dai.LC_belief(self, *args)

    def beliefV(self, i):
        return _dai.LC_beliefV(self, i)

    def beliefs(self):
        return _dai.LC_beliefs(self)

    def logZ(self):
        return _dai.LC_logZ(self)

    def init(self, *args):
        return _dai.LC_init(self, *args)

    def run(self):
        return _dai.LC_run(self)

    def maxDiff(self):
        return _dai.LC_maxDiff(self)

    def Iterations(self):
        return _dai.LC_Iterations(self)

    def setMaxIter(self, maxiter):
        return _dai.LC_setMaxIter(self, maxiter)

    def setProperties(self, opts):
        return _dai.LC_setProperties(self, opts)

    def getProperties(self):
        return _dai.LC_getProperties(self)

    def printProperties(self):
        return _dai.LC_printProperties(self)

    def CalcCavityDist(self, i, name, opts):
        return _dai.LC_CalcCavityDist(self, i, name, opts)

    def InitCavityDists(self, name, opts):
        return _dai.LC_InitCavityDists(self, name, opts)

    def SetCavityDists(self, Q):
        return _dai.LC_SetCavityDists(self, Q)

    def NewPancake(self, i, _I, hasNaNs):
        return _dai.LC_NewPancake(self, i, _I, hasNaNs)

    def CalcBelief(self, i):
        return _dai.LC_CalcBelief(self, i)

    def pancake(self, i):
        return _dai.LC_pancake(self, i)

    def cavitydist(self, i):
        return _dai.LC_cavitydist(self, i)
    __swig_destroy__ = _dai.delete_LC

# Register LC in _dai:
_dai.LC_swigregister(LC)

class JTree(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    RTree = property(_dai.JTree_RTree_get, _dai.JTree_RTree_set)
    Qa = property(_dai.JTree_Qa_get, _dai.JTree_Qa_set)
    Qb = property(_dai.JTree_Qb_get, _dai.JTree_Qb_set)
    props = property(_dai.JTree_props_get, _dai.JTree_props_set)

    def __init__(self, *args):
        _dai.JTree_swiginit(self, _dai.new_JTree(*args))

    def clone(self):
        return _dai.JTree_clone(self)

    def name(self):
        return _dai.JTree_name(self)

    def belief(self, vs):
        return _dai.JTree_belief(self, vs)

    def beliefs(self):
        return _dai.JTree_beliefs(self)

    def logZ(self):
        return _dai.JTree_logZ(self)

    def findMaximum(self):
        return _dai.JTree_findMaximum(self)

    def init(self, *args):
        return _dai.JTree_init(self, *args)

    def run(self):
        return _dai.JTree_run(self)

    def maxDiff(self):
        return _dai.JTree_maxDiff(self)

    def Iterations(self):
        return _dai.JTree_Iterations(self)

    def setProperties(self, opts):
        return _dai.JTree_setProperties(self, opts)

    def getProperties(self):
        return _dai.JTree_getProperties(self)

    def printProperties(self):
        return _dai.JTree_printProperties(self)

    def construct(self, *args):
        return _dai.JTree_construct(self, *args)

    def GenerateJT(self, fg, cl):
        return _dai.JTree_GenerateJT(self, fg, cl)

    def message(self, *args):
        return _dai.JTree_message(self, *args)

    def runHUGIN(self):
        return _dai.JTree_runHUGIN(self)

    def runShaferShenoy(self):
        return _dai.JTree_runShaferShenoy(self)

    def findEfficientTree(self, *args):
        return _dai.JTree_findEfficientTree(self, *args)

    def calcMarginal(self, vs):
        return _dai.JTree_calcMarginal(self, vs)
    __swig_destroy__ = _dai.delete_JTree

# Register JTree in _dai:
_dai.JTree_swigregister(JTree)


def boundTreewidth(fg, fn, maxStates=0):
    return _dai.boundTreewidth(fg, fn, maxStates)
class TreeEP(JTree):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    props = property(_dai.TreeEP_props_get, _dai.TreeEP_props_set)

    def __init__(self, *args):
        _dai.TreeEP_swiginit(self, _dai.new_TreeEP(*args))

    def clone(self):
        return _dai.TreeEP_clone(self)

    def construct(self, fg, opts):
        return _dai.TreeEP_construct(self, fg, opts)

    def name(self):
        return _dai.TreeEP_name(self)

    def logZ(self):
        return _dai.TreeEP_logZ(self)

    def init(self, *args):
        return _dai.TreeEP_init(self, *args)

    def run(self):
        return _dai.TreeEP_run(self)

    def maxDiff(self):
        return _dai.TreeEP_maxDiff(self)

    def Iterations(self):
        return _dai.TreeEP_Iterations(self)

    def setMaxIter(self, maxiter):
        return _dai.TreeEP_setMaxIter(self, maxiter)

    def setProperties(self, opts):
        return _dai.TreeEP_setProperties(self, opts)

    def getProperties(self):
        return _dai.TreeEP_getProperties(self)

    def printProperties(self):
        return _dai.TreeEP_printProperties(self)
    __swig_destroy__ = _dai.delete_TreeEP

# Register TreeEP in _dai:
_dai.TreeEP_swigregister(TreeEP)

class MR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    props = property(_dai.MR_props_get, _dai.MR_props_set)

    def __init__(self, *args):
        _dai.MR_swiginit(self, _dai.new_MR(*args))

    def clone(self):
        return _dai.MR_clone(self)

    def construct(self, fg, opts):
        return _dai.MR_construct(self, fg, opts)

    def name(self):
        return _dai.MR_name(self)

    def belief(self, *args):
        return _dai.MR_belief(self, *args)

    def beliefV(self, i):
        return _dai.MR_beliefV(self, i)

    def beliefs(self):
        return _dai.MR_beliefs(self)

    def logZ(self):
        return _dai.MR_logZ(self)

    def init(self, *args):
        return _dai.MR_init(self, *args)

    def run(self):
        return _dai.MR_run(self)

    def maxDiff(self):
        return _dai.MR_maxDiff(self)

    def Iterations(self):
        return _dai.MR_Iterations(self)

    def setProperties(self, opts):
        return _dai.MR_setProperties(self, opts)

    def getProperties(self):
        return _dai.MR_getProperties(self)

    def printProperties(self):
        return _dai.MR_printProperties(self)
    __swig_destroy__ = _dai.delete_MR

# Register MR in _dai:
_dai.MR_swigregister(MR)

class Gibbs(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    props = property(_dai.Gibbs_props_get, _dai.Gibbs_props_set)

    def __init__(self, *args):
        _dai.Gibbs_swiginit(self, _dai.new_Gibbs(*args))

    def clone(self):
        return _dai.Gibbs_clone(self)

    def construct(self, fg, opts):
        return _dai.Gibbs_construct(self, fg, opts)

    def name(self):
        return _dai.Gibbs_name(self)

    def belief(self, *args):
        return _dai.Gibbs_belief(self, *args)

    def beliefV(self, i):
        return _dai.Gibbs_beliefV(self, i)

    def beliefF(self, I):
        return _dai.Gibbs_beliefF(self, I)

    def beliefs(self):
        return _dai.Gibbs_beliefs(self)

    def logZ(self):
        return _dai.Gibbs_logZ(self)

    def findMaximum(self):
        return _dai.Gibbs_findMaximum(self)

    def init(self, *args):
        return _dai.Gibbs_init(self, *args)

    def run(self):
        return _dai.Gibbs_run(self)

    def maxDiff(self):
        return _dai.Gibbs_maxDiff(self)

    def Iterations(self):
        return _dai.Gibbs_Iterations(self)

    def setMaxIter(self, maxiter):
        return _dai.Gibbs_setMaxIter(self, maxiter)

    def setProperties(self, opts):
        return _dai.Gibbs_setProperties(self, opts)

    def getProperties(self):
        return _dai.Gibbs_getProperties(self)

    def printProperties(self):
        return _dai.Gibbs_printProperties(self)

    def randomizeState(self):
        return _dai.Gibbs_randomizeState(self)

    def state(self, *args):
        return _dai.Gibbs_state(self, *args)
    __swig_destroy__ = _dai.delete_Gibbs

# Register Gibbs in _dai:
_dai.Gibbs_swigregister(Gibbs)


def getGibbsState(fg, maxiter):
    return _dai.getGibbsState(fg, maxiter)
class CBP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _dai.CBP_swiginit(self, _dai.new_CBP(*args))

    def clone(self):
        return _dai.CBP_clone(self)

    def construct(self, fg, opts):
        return _dai.CBP_construct(self, fg, opts)

    def name(self):
        return _dai.CBP_name(self)

    def belief(self, *args):
        return _dai.CBP_belief(self, *args)

    def beliefV(self, i):
        return _dai.CBP_beliefV(self, i)

    def beliefF(self, I):
        return _dai.CBP_beliefF(self, I)

    def beliefs(self):
        return _dai.CBP_beliefs(self)

    def logZ(self):
        return _dai.CBP_logZ(self)

    def init(self, *args):
        return _dai.CBP_init(self, *args)

    def run(self):
        return _dai.CBP_run(self)

    def maxDiff(self):
        return _dai.CBP_maxDiff(self)

    def Iterations(self):
        return _dai.CBP_Iterations(self)

    def setMaxIter(self, maxiter):
        return _dai.CBP_setMaxIter(self, maxiter)

    def setProperties(self, opts):
        return _dai.CBP_setProperties(self, opts)

    def getProperties(self):
        return _dai.CBP_getProperties(self)

    def printProperties(self):
        return _dai.CBP_printProperties(self)
    props = property(_dai.CBP_props_get, _dai.CBP_props_set)
    __swig_destroy__ = _dai.delete_CBP

# Register CBP in _dai:
_dai.CBP_swigregister(CBP)


def BBPFindClampVar(in_bp, clampingVar, bbp_props, cfn, maxVarOut):
    return _dai.BBPFindClampVar(in_bp, clampingVar, bbp_props, cfn, maxVarOut)
class DecMAP(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    props = property(_dai.DecMAP_props_get, _dai.DecMAP_props_set)

    def __init__(self, *args):
        _dai.DecMAP_swiginit(self, _dai.new_DecMAP(*args))

    def clone(self):
        return _dai.DecMAP_clone(self)

    def construct(self, fg, opts):
        return _dai.DecMAP_construct(self, fg, opts)

    def name(self):
        return _dai.DecMAP_name(self)

    def belief(self, *args):
        return _dai.DecMAP_belief(self, *args)

    def beliefV(self, i):
        return _dai.DecMAP_beliefV(self, i)

    def beliefF(self, I):
        return _dai.DecMAP_beliefF(self, I)

    def beliefs(self):
        return _dai.DecMAP_beliefs(self)

    def logZ(self):
        return _dai.DecMAP_logZ(self)

    def findMaximum(self):
        return _dai.DecMAP_findMaximum(self)

    def init(self, *args):
        return _dai.DecMAP_init(self, *args)

    def run(self):
        return _dai.DecMAP_run(self)

    def maxDiff(self):
        return _dai.DecMAP_maxDiff(self)

    def Iterations(self):
        return _dai.DecMAP_Iterations(self)

    def setProperties(self, opts):
        return _dai.DecMAP_setProperties(self, opts)

    def getProperties(self):
        return _dai.DecMAP_getProperties(self)

    def printProperties(self):
        return _dai.DecMAP_printProperties(self)
    __swig_destroy__ = _dai.delete_DecMAP

# Register DecMAP in _dai:
_dai.DecMAP_swigregister(DecMAP)

class Cobweb(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    cav = property(_dai.Cobweb_cav_get, _dai.Cobweb_cav_set)
    _g2l = property(_dai.Cobweb__g2l_get, _dai.Cobweb__g2l_set)

    def __init__(self, *args):
        _dai.Cobweb_swiginit(self, _dai.new_Cobweb(*args))
    __swig_destroy__ = _dai.delete_Cobweb

    def setInfAlg(self, alg):
        return _dai.Cobweb_setInfAlg(self, alg)

    def factor(self, I):
        return _dai.Cobweb_factor(self, I)

    def initialize(self):
        return _dai.Cobweb_initialize(self)

    def marginal(self, *args):
        return _dai.Cobweb_marginal(self, *args)

    def updateFactor(self, gind, msg, multiply=False):
        return _dai.Cobweb_updateFactor(self, gind, msg, multiply)

    def belief(self, *args):
        return _dai.Cobweb_belief(self, *args)

# Register Cobweb in _dai:
_dai.Cobweb_swigregister(Cobweb)

class GLC(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    props = property(_dai.GLC_props_get, _dai.GLC_props_set)

    def __init__(self, *args):
        _dai.GLC_swiginit(self, _dai.new_GLC(*args))

    def clone(self):
        return _dai.GLC_clone(self)

    def construct(self, fg, opts):
        return _dai.GLC_construct(self, fg, opts)

    def name(self):
        return _dai.GLC_name(self)

    def belief(self, *args):
        return _dai.GLC_belief(self, *args)

    def beliefV(self, i):
        return _dai.GLC_beliefV(self, i)

    def beliefs(self):
        return _dai.GLC_beliefs(self)

    def logZ(self):
        return _dai.GLC_logZ(self)

    def init(self, *args):
        return _dai.GLC_init(self, *args)

    def run(self):
        return _dai.GLC_run(self)

    def maxDiff(self):
        return _dai.GLC_maxDiff(self)

    def Iterations(self):
        return _dai.GLC_Iterations(self)

    def setMaxIter(self, maxiter):
        return _dai.GLC_setMaxIter(self, maxiter)

    def setProperties(self, opts):
        return _dai.GLC_setProperties(self, opts)

    def getProperties(self):
        return _dai.GLC_getProperties(self)

    def printProperties(self):
        return _dai.GLC_printProperties(self)

    def CW(self, *args):
        return _dai.GLC_CW(self, *args)

    def CalcCavityDist(self, i, name, opts):
        return _dai.GLC_CalcCavityDist(self, i, name, opts)

    def InitCavityDists(self, name, opts):
        return _dai.GLC_InitCavityDists(self, name, opts)

    def NewPancake(self, R, _R2):
        return _dai.GLC_NewPancake(self, R, _R2)

    def OVNewPancake(self, R):
        return _dai.GLC_OVNewPancake(self, R)

    def CalcBelief(self, i, isFinal=False):
        return _dai.GLC_CalcBelief(self, i, isFinal)

    def CalcFactorBelief(self, I):
        return _dai.GLC_CalcFactorBelief(self, I)

    def calcRegions(self):
        return _dai.GLC_calcRegions(self)

    def initCWs(self):
        return _dai.GLC_initCWs(self)

    def setCWs(self, name, opts):
        return _dai.GLC_setCWs(self, name, opts)

    def findLoopClusters(self, remaining, allcl, newcl, root, length, vars):
        return _dai.GLC_findLoopClusters(self, remaining, allcl, newcl, root, length, vars)

    def findOVLoopClusters(self, remaining, allcl, newcl, root, length, vars):
        return _dai.GLC_findOVLoopClusters(self, remaining, allcl, newcl, root, length, vars)
    __swig_destroy__ = _dai.delete_GLC

# Register GLC in _dai:
_dai.GLC_swigregister(GLC)



